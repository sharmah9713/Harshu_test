Below is the complete Terraform structure to create an AWS EKS cluster using only t2.micro instances (which are free-tier eligible). The setup includes VPC, subnets, security groups, IAM roles, and EKS cluster.

Directory Structure

eks-cluster/
│── main.tf
│── vpc.tf
│── eks.tf
│── security.tf
│── outputs.tf
│── variables.tf
│── provider.tf
│── versions.tf
│── terraform.tfvars

1. versions.tf (Terraform version and provider requirements)

terraform {
  required_version = ">= 1.3.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

2. provider.tf (AWS provider configuration)

provider "aws" {
  region = var.aws_region
}

3. variables.tf (Define all variables)

variable "aws_region" {
  description = "AWS region for EKS cluster"
  default     = "us-east-1"
}

variable "cluster_name" {
  description = "EKS Cluster Name"
  default     = "my-eks-cluster"
}

variable "instance_type" {
  description = "EC2 instance type for worker nodes"
  default     = "t2.micro"
}

variable "vpc_cidr" {
  description = "VPC CIDR block"
  default     = "10.0.0.0/16"
}

variable "subnet_cidrs" {
  description = "Private subnets for EKS worker nodes"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24"]
}

4. vpc.tf (Create VPC, subnets, and networking)

resource "aws_vpc" "eks_vpc" {
  cidr_block = var.vpc_cidr
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "eks-vpc"
  }
}

resource "aws_subnet" "private_subnets" {
  count = length(var.subnet_cidrs)

  vpc_id            = aws_vpc.eks_vpc.id
  cidr_block        = var.subnet_cidrs[count.index]
  availability_zone = element(["us-east-1a", "us-east-1b"], count.index)

  tags = {
    Name = "private-subnet-${count.index}"
  }
}

5. security.tf (Create security group for EKS)

resource "aws_security_group" "eks_sg" {
  vpc_id = aws_vpc.eks_vpc.id

  ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "eks-sg"
  }
}

6. eks.tf (Create EKS cluster and node group)

resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "eks.amazonaws.com"
      }
    }]
  })
}

resource "aws_eks_cluster" "eks" {
  name     = var.cluster_name
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids = aws_subnet.private_subnets[*].id
  }

  tags = {
    Name = var.cluster_name
  }
}

resource "aws_iam_role" "eks_node_role" {
  name = "eks-node-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_eks_node_group" "eks_nodes" {
  cluster_name    = aws_eks_cluster.eks.name
  node_group_name = "eks-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = aws_subnet.private_subnets[*].id

  scaling_config {
    desired_size = 1
    max_size     = 1
    min_size     = 1
  }

  instance_types = [var.instance_type]

  tags = {
    Name = "eks-node-group"
  }
}

7. outputs.tf (Display cluster details after deployment)

output "eks_cluster_name" {
  value = aws_eks_cluster.eks.name
}

output "eks_cluster_endpoint" {
  value = aws_eks_cluster.eks.endpoint
}

output "eks_cluster_arn" {
  value = aws_eks_cluster.eks.arn
}

8. terraform.tfvars (Custom values for variables)

aws_region    = "us-east-1"
cluster_name  = "my-eks-cluster"
instance_type = "t2.micro"

Deployment Steps
	1.	Initialize Terraform

terraform init


	2.	Plan the deployment

terraform plan


	3.	Apply the configuration

terraform apply -auto-approve


	4.	Configure kubectl

aws eks update-kubeconfig --name my-eks-cluster --region us-east-1


	5.	Verify the EKS cluster

kubectl get nodes

Destroy the Cluster (If Needed)

terraform destroy -auto-approve

This Terraform setup creates an EKS cluster using free-tier t2.micro instances and includes VPC, IAM roles, security groups, and private subnets. Let me know if you need modifications!
